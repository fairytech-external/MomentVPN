// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Moment
import Combine
import CoreFoundation
import CryptoKit
import Darwin
import Foundation
import MachO
@_exported import Moment
import Network
import NetworkExtension
import OSLog
import SQLite3
import Security
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class MomentConstants {
  public static let MOMENT_NOTIFICATION_KEY: Swift.String
  @objc deinit
}
public enum VPNServiceError : Swift.Error {
  case userDeclinedVPNInstallation
  case vpnStartFailed(underlyingError: any Swift.Error)
  case noUserId
  case initFailed(underlyingError: any Swift.Error)
  case notInitialized
  case noInternetConnection
  case jailBrokenDevice
  case noPacketTunnelBundleIdentifier
}
extension Moment.VPNServiceError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum MatchType {
  case enter
  case cart
  case payment
  public static func == (a: Moment.MatchType, b: Moment.MatchType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RecognitionInfo {
  public let businessId: Swift.String
  public let matchType: Moment.MatchType
  public let timestamp: Foundation.Date
  public let customData: Swift.String
}
@objc @_inheritsConvenienceInitializers open class PacketTunnelProvider : NetworkExtension.NEPacketTunnelProvider {
  public var basicDelegate: (any Moment.BasicDelegate)?
  public var antiPhishingDelegate: (any Moment.AntiPhishingDelegate)?
  @objc override dynamic public init()
  #if compiler(>=5.3) && $AsyncAwait
  @objc override dynamic public func startTunnel(options: [Swift.String : ObjectiveC.NSObject]? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc override dynamic public func stopTunnel(with reason: NetworkExtension.NEProviderStopReason) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc override dynamic public func handleAppMessage(_ messageData: Foundation.Data) async -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc override dynamic public func sleep() async
  #endif
  @objc override dynamic public func wake()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MomentVPNService : Swift.Sendable {
  public static let shared: Moment.MomentVPNService
  public static func initialize(packetTunnelBundleIdentifier: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  final public func start() async throws
  #endif
  final public func start(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  final public func stop()
  #if compiler(>=5.3) && $AsyncAwait
  final public func getVPNStatus() async -> NetworkExtension.NEVPNStatus?
  #endif
  final public func withVPNStatus(completion: @escaping (NetworkExtension.NEVPNStatus?) -> Swift.Void)
  @objc deinit
}
extension Moment.MomentVPNService {
  #if compiler(>=5.3) && $AsyncAwait
  public static func isConnectedToOwnVPN() async -> Swift.Bool
  #endif
  public static func isConnectedToOwnVPN(completion: @escaping (Swift.Bool) -> Swift.Void)
}
extension Moment.MomentVPNService {
  final public func setMarketingPushConsent(agreed: Swift.Bool)
  final public func setUserId(to userId: Swift.String)
  final public func setVPNProfileName(to name: Swift.String)
  final public func setVPNServerName(to name: Swift.String)
}
extension Moment.MomentVPNService {
  @_Concurrency.MainActor final public func handleMomentNotification(response: UserNotifications.UNNotificationResponse)
}
public protocol AntiPhishingDelegate : AnyObject {
  #if compiler(>=5.3) && $AsyncAwait
  func handleAntiPhishingDetection(domain: Swift.String) async
  #endif
}
public protocol BasicDelegate : AnyObject {
  #if compiler(>=5.3) && $AsyncAwait
  func handleRecognitionResult(recognizedInfo: Moment.RecognitionInfo) async
  #endif
}
extension Moment.MatchType : Swift.Equatable {}
extension Moment.MatchType : Swift.Hashable {}
